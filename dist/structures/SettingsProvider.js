"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const discord_akairo_1 = require("discord-akairo");
const discord_js_1 = require("discord.js");
const Settings_1 = require("../models/Settings");
const _ = __importStar(require("dot-prop"));
class SettingsProvider extends discord_akairo_1.Provider {
    constructor(repository) {
        super();
        this.repo = repository;
    }
    async init() {
        const settings = await this.repo.find();
        for (const setting of settings) {
            this.items.set(setting.guild, JSON.parse(setting.settings));
        }
    }
    get(guild, key, defaultValue) {
        const id = this.constructor.getGuildID(guild);
        if (this.items.has(id)) {
            return _.get(this.items.get(id), key, defaultValue);
        }
        return defaultValue;
    }
    getRaw(guild) {
        const id = this.constructor.getGuildID(guild);
        return this.items.get(id);
    }
    set(guild, key, value) {
        const id = this.constructor.getGuildID(guild);
        const data = this.items.get(id) || {};
        _.set(data, key, value);
        this.items.set(id, data);
        return this.repo.createQueryBuilder()
            .insert()
            .into(Settings_1.Settings)
            .values({ guild: id, settings: JSON.stringify(data) })
            .onConflict('("guild") DO UPDATE SET "settings" = :settings')
            .setParameter("settings", JSON.stringify(data))
            .execute();
    }
    delete(guild, key) {
        const id = this.constructor.getGuildID(guild);
        const data = this.items.get(id) || {};
        _.delete(data, key);
        return this.repo.createQueryBuilder()
            .insert()
            .into(Settings_1.Settings)
            .values({ guild: id, settings: JSON.stringify(data) })
            .onConflict('("guild") DO UPDATE SET "settings" = :settings')
            .setParameter("settings", JSON.stringify(data))
            .execute();
    }
    clear(guild) {
        const id = this.constructor.getGuildID(guild);
        this.items.delete(id);
        return this.repo.delete(id);
    }
    static getGuildID(guild) {
        if (guild instanceof discord_js_1.Guild)
            return guild.id;
        if (guild === "global" || guild === null)
            return "0";
        if (typeof guild === "string" && /^\d+$/.test(guild))
            return guild;
        throw new TypeError('Invalid guild specified. Must be a Guild instance, guild ID, "global", or null.');
    }
}
exports.default = SettingsProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2V0dGluZ3NQcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJ1Y3R1cmVzL1NldHRpbmdzUHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsbURBQTBDO0FBQzFDLDJDQUFtQztBQUVuQyxpREFBOEM7QUFDOUMsNENBQThCO0FBRTlCLE1BQXFCLGdCQUFpQixTQUFRLHlCQUFRO0lBR2xELFlBQW1CLFVBQTJCO1FBQzFDLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUM7SUFDM0IsQ0FBQztJQUVNLEtBQUssQ0FBQyxJQUFJO1FBQ2IsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3hDLEtBQUssTUFBTSxPQUFPLElBQUksUUFBUSxFQUFFO1lBQzVCLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztTQUMvRDtJQUNMLENBQUM7SUFFTSxHQUFHLENBQUksS0FBcUIsRUFBRSxHQUFXLEVBQUUsWUFBaUI7UUFDL0QsTUFBTSxFQUFFLEdBQUksSUFBSSxDQUFDLFdBQXVDLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzNFLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDcEIsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxZQUFZLENBQUMsQ0FBQztTQUN2RDtRQUNELE9BQU8sWUFBWSxDQUFDO0lBQ3hCLENBQUM7SUFFTSxNQUFNLENBQUMsS0FBcUI7UUFDL0IsTUFBTSxFQUFFLEdBQUksSUFBSSxD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cmQtYWthaXJvXCI7XHJcbmltcG9ydCB7IEd1aWxkIH0gZnJvbSBcImRpc2NvcmQuanNcIjtcclxuaW1wb3J0IHsgUmVwb3NpdG9yeSwgSW5zZXJ0UmVzdWx0LCBEZWxldGVSZXN1bHQgfSBmcm9tIFwidHlwZW9ybVwiO1xyXG5pbXBvcnQgeyBTZXR0aW5ncyB9IGZyb20gXCIuLi9tb2RlbHMvU2V0dGluZ3NcIjtcclxuaW1wb3J0ICogYXMgXyBmcm9tIFwiZG90LXByb3BcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNldHRpbmdzUHJvdmlkZXIgZXh0ZW5kcyBQcm92aWRlciB7XHJcbiAgICBwdWJsaWMgcmVwbzogUmVwb3NpdG9yeTxhbnk+O1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihyZXBvc2l0b3J5OiBSZXBvc2l0b3J5PGFueT4pIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMucmVwbyA9IHJlcG9zaXRvcnk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIGluaXQoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSBhd2FpdCB0aGlzLnJlcG8uZmluZCgpO1xyXG4gICAgICAgIGZvciAoY29uc3Qgc2V0dGluZyBvZiBzZXR0aW5ncykge1xyXG4gICAgICAgICAgICB0aGlzLml0ZW1zLnNldChzZXR0aW5nLmd1aWxkLCBKU09OLnBhcnNlKHNldHRpbmcuc2V0dGluZ3MpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldDxUPihndWlsZDogc3RyaW5nIHwgR3VpbGQsIGtleTogc3RyaW5nLCBkZWZhdWx0VmFsdWU6IGFueSk6IFQgfCBhbnkge1xyXG4gICAgICAgIGNvbnN0IGlkID0gKHRoaXMuY29uc3RydWN0b3IgYXMgdHlwZW9mIFNldHRpbmdzUHJvdmlkZXIpLmdldEd1aWxkSUQoZ3VpbGQpO1xyXG4gICAgICAgIGlmICh0aGlzLml0ZW1zLmhhcyhpZCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF8uZ2V0KHRoaXMuaXRlbXMuZ2V0KGlkKSwga2V5LCBkZWZhdWx0VmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRSYXcoZ3VpbGQ6IHN0cmluZyB8IEd1aWxkKSB7XHJcbiAgICAgICAgY29uc3QgaWQgPSAodGhpcy5jb25zdHJ1Y3RvciBhcyB0eXBlb2YgU2V0dGluZ3NQcm92aWRlcikuZ2V0R3VpbGRJRChndWlsZCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXMuZ2V0KGlkKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0KGd1aWxkOiBzdHJpbmcgfCBHdWlsZCwga2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBQcm9taXNlPEluc2VydFJlc3VsdD4ge1xyXG4gICAgICAgIGNvbnN0IGlkID0gKHRoaXMuY29uc3RydWN0b3IgYXMgdHlwZW9mIFNldHRpbmdzUHJvdmlkZXIpLmdldEd1aWxkSUQoZ3VpbGQpO1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLml0ZW1zLmdldChpZCkgfHwge307XHJcbiAgICAgICAgXy5zZXQoZGF0YSwga2V5LCB2YWx1ZSk7XHJcbiAgICAgICAgdGhpcy5pdGVtcy5zZXQoaWQsIGRhdGEpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5yZXBvLmNyZWF0ZVF1ZXJ5QnVpbGRlcigpXHJcbiAgICAgICAgICAgIC5pbnNlcnQoKVxyXG4gICAgICAgICAgICAuaW50byhTZXR0aW5ncylcclxuICAgICAgICAgICAgLnZhbHVlcyh7IGd1aWxkOiBpZCwgc2V0dGluZ3M6IEpTT04uc3RyaW5naWZ5KGRhdGEpIH0pXHJcbiAgICAgICAgICAgIC5vbkNvbmZsaWN0KCcoXCJndWlsZFwiKSBETyBVUERBVEUgU0VUIFwic2V0dGluZ3NcIiA9IDpzZXR0aW5ncycpXHJcbiAgICAgICAgICAgIC5zZXRQYXJhbWV0ZXIoXCJzZXR0aW5nc1wiLCBKU09OLnN0cmluZ2lmeShkYXRhKSlcclxuICAgICAgICAgICAgLmV4ZWN1dGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZGVsZXRlKGd1aWxkOiBzdHJpbmcgfCBHdWlsZCwga2V5OiBzdHJpbmcpOiBQcm9taXNlPEluc2VydFJlc3VsdD4ge1xyXG4gICAgICAgIGNvbnN0IGlkID0gKHRoaXMuY29uc3RydWN0b3IgYXMgdHlwZW9mIFNldHRpbmdzUHJvdmlkZXIpLmdldEd1aWxkSUQoZ3VpbGQpO1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLml0ZW1zLmdldChpZCkgfHwge307XHJcbiAgICAgICAgXy5kZWxldGUoZGF0YSwga2V5KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVwby5jcmVhdGVRdWVyeUJ1aWxkZXIoKVxyXG4gICAgICAgICAgICAuaW5zZXJ0KClcclxuICAgICAgICAgICAgLmludG8oU2V0dGluZ3MpXHJcbiAgICAgICAgICAgIC52YWx1ZXMoeyBndWlsZDogaWQsIHNldHRpbmdzOiBKU09OLnN0cmluZ2lmeShkYXRhKSB9KVxyXG4gICAgICAgICAgICAub25Db25mbGljdCgnKFwiZ3VpbGRcIikgRE8gVVBEQVRFIFNFVCBcInNldHRpbmdzXCIgPSA6c2V0dGluZ3MnKVxyXG4gICAgICAgICAgICAuc2V0UGFyYW1ldGVyKFwic2V0dGluZ3NcIiwgSlNPTi5zdHJpbmdpZnkoZGF0YSkpXHJcbiAgICAgICAgICAgIC5leGVjdXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsZWFyKGd1aWxkOiBzdHJpbmcgfCBHdWlsZCk6IFByb21pc2U8RGVsZXRlUmVzdWx0PiB7XHJcbiAgICAgICAgY29uc3QgaWQgPSAodGhpcy5jb25zdHJ1Y3RvciBhcyB0eXBlb2YgU2V0dGluZ3NQcm92aWRlcikuZ2V0R3VpbGRJRChndWlsZCk7XHJcbiAgICAgICAgdGhpcy5pdGVtcy5kZWxldGUoaWQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlcG8uZGVsZXRlKGlkKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHN0YXRpYyBnZXRHdWlsZElEKGd1aWxkOiBzdHJpbmcgfCBHdWlsZCk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKGd1aWxkIGluc3RhbmNlb2YgR3VpbGQpIHJldHVybiBndWlsZC5pZDtcclxuICAgICAgICBpZiAoZ3VpbGQgPT09IFwiZ2xvYmFsXCIgfHwgZ3VpbGQgPT09IG51bGwpIHJldHVybiBcIjBcIjtcclxuICAgICAgICBpZiAodHlwZW9mIGd1aWxkID09PSBcInN0cmluZ1wiICYmIC9eXFxkKyQvLnRlc3QoZ3VpbGQpKSByZXR1cm4gZ3VpbGQ7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBndWlsZCBzcGVjaWZpZWQuIE11c3QgYmUgYSBHdWlsZCBpbnN0YW5jZSwgZ3VpbGQgSUQsIFwiZ2xvYmFsXCIsIG9yIG51bGwuJyk7XHJcbiAgICB9XHJcbn0iXX0=