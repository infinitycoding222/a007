"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_akairo_1 = require("discord-akairo");
const discord_js_1 = require("discord.js");
class EvalCommand extends discord_akairo_1.Command {
    constructor() {
        super('guilds', {
            aliases: ['guilds', "g", "servers"],
            category: 'Owner',
            description: {
                content: "Shows the servers the bot is in",
                examples: [":?guilds"],
                usages: ""
            },
            clientPermissions: [],
            userPermissions: [],
            ratelimit: 3,
            ownerOnly: true,
            args: [{
                    id: 'text',
                    type: 'text',
                    match: 'content'
                }]
        });
    }
    exec(message, args) {
        if (message.author.id == '473276250815856650' || message.author.id == '540219416726601739') {
            let servers = this.client.guilds.map(g => `${g.name.replace(/[^\x00-\x7F]/g, "")}${" ".repeat(Math.floor(Math.max(...this.client.guilds.map(g => g.name.length))) + -g.name.replace(/[^\x00-\x7F]/g, "").length)} | ${g.id}`).join('\n');
            let guilds = new discord_js_1.MessageEmbed()
                .setAuthor(`Guilds Command | ${message.guild.name}`)
                .setColor(`DARK_BLUE`)
                .setDescription(`\`\`\`ini\n[ ${servers} ]\`\`\``);
            message.util.send(guilds);
        }
        else {
            message.util.reply(`No No No...`);
        }
    }
}
exports.default = EvalCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3VpbGRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1hbmRzL093bmVyL2d1aWxkcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1EQUF5QztBQUN6QywyQ0FBbUQ7QUFFbkQsTUFBcUIsV0FBWSxTQUFRLHdCQUFPO0lBQzVDO1FBQ0ksS0FBSyxDQUFDLFFBQVEsRUFBRTtZQUNaLE9BQU8sRUFBRSxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsU0FBUyxDQUFDO1lBQ25DLFFBQVEsRUFBRSxPQUFPO1lBQ2pCLFdBQVcsRUFBRTtnQkFDVCxPQUFPLEVBQUUsaUNBQWlDO2dCQUMxQyxRQUFRLEVBQUUsQ0FBQyxVQUFVLENBQUM7Z0JBQ3RCLE1BQU0sRUFBRSxFQUFFO2FBQ2I7WUFDRCxpQkFBaUIsRUFBRSxFQUFFO1lBQ3JCLGVBQWUsRUFBRSxFQUFFO1lBQ25CLFNBQVMsRUFBRSxDQUFDO1lBQ1osU0FBUyxFQUFFLElBQUk7WUFDZixJQUFJLEVBQUUsQ0FBQztvQkFDSCxFQUFFLEVBQUUsTUFBTTtvQkFDVixJQUFJLEVBQUUsTUFBTTtvQkFDWixLQUFLLEVBQUUsU0FBUztpQkFDbkIsQ0FBQztTQUNMLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTSxJQUFJLENBQUMsT0FBTyxFQUFFLElBQWE7UUFDOUIsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxvQkFBb0IsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxvQkFBb0IsRUFBRTtZQUN4RixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUN6TyxJQUFJLE1BQU0sR0FBRyxJQUFJLHlCQUFZLEVBQUU7aUJBQzFCLFNBQVMsQ0FBQyxvQkFBb0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztpQkFDbkQsUUFBUSxDQUFDLFdBQVcsQ0FBQztpQkFDckIsY0FBYyxDQUFDLGdCQUFnQixPQUFPLFVBQVUsQ0FBQyxDQUFBO1lBQ3RELE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1NBQzVCO2FBQU07WUFDSCxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQTtTQUNwQztJQUNMLENBQUM7Q0FDSjtBQWxDRCw4QkFrQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tYW5kIH0gZnJvbSAnZGlzY29yZC1ha2Fpcm8nO1xyXG5pbXBvcnQgeyBNZXNzYWdlRW1iZWQsIE1lc3NhZ2UgfSBmcm9tICdkaXNjb3JkLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV2YWxDb21tYW5kIGV4dGVuZHMgQ29tbWFuZCB7XHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoJ2d1aWxkcycsIHtcclxuICAgICAgICAgICAgYWxpYXNlczogWydndWlsZHMnLCBcImdcIiwgXCJzZXJ2ZXJzXCJdLFxyXG4gICAgICAgICAgICBjYXRlZ29yeTogJ093bmVyJyxcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiU2hvd3MgdGhlIHNlcnZlcnMgdGhlIGJvdCBpcyBpblwiLFxyXG4gICAgICAgICAgICAgICAgZXhhbXBsZXM6IFtcIjo/Z3VpbGRzXCJdLFxyXG4gICAgICAgICAgICAgICAgdXNhZ2VzOiBcIlwiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNsaWVudFBlcm1pc3Npb25zOiBbXSxcclxuICAgICAgICAgICAgdXNlclBlcm1pc3Npb25zOiBbXSxcclxuICAgICAgICAgICAgcmF0ZWxpbWl0OiAzLFxyXG4gICAgICAgICAgICBvd25lck9ubHk6IHRydWUsXHJcbiAgICAgICAgICAgIGFyZ3M6IFt7XHJcbiAgICAgICAgICAgICAgICBpZDogJ3RleHQnLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgICAgICAgICAgbWF0Y2g6ICdjb250ZW50J1xyXG4gICAgICAgICAgICB9XVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBleGVjKG1lc3NhZ2UsIGFyZ3M6IE1lc3NhZ2UpIHtcclxuICAgICAgICBpZiAobWVzc2FnZS5hdXRob3IuaWQgPT0gJzQ3MzI3NjI1MDgxNTg1NjY1MCcgfHwgbWVzc2FnZS5hdXRob3IuaWQgPT0gJzU0MDIxOTQxNjcyNjYwMTczOScpIHtcclxuICAgICAgICAgICAgbGV0IHNlcnZlcnMgPSB0aGlzLmNsaWVudC5ndWlsZHMubWFwKGcgPT4gYCR7Zy5uYW1lLnJlcGxhY2UoL1teXFx4MDAtXFx4N0ZdL2csIFwiXCIpfSR7XCIgXCIucmVwZWF0KE1hdGguZmxvb3IoTWF0aC5tYXgoLi4udGhpcy5jbGllbnQuZ3VpbGRzLm1hcChnID0+IGcubmFtZS5sZW5ndGgpKSkgKyAtIGcubmFtZS5yZXBsYWNlKC9bXlxceDAwLVxceDdGXS9nLCBcIlwiKS5sZW5ndGgpfSB8ICR7Zy5pZH1gKS5qb2luKCdcXG4nKVxyXG4gICAgICAgICAgICBsZXQgZ3VpbGRzID0gbmV3IE1lc3NhZ2VFbWJlZCgpXHJcbiAgICAgICAgICAgICAgICAuc2V0QXV0aG9yKGBHdWlsZHMgQ29tbWFuZCB8ICR7bWVzc2FnZS5ndWlsZC5uYW1lfWApXHJcbiAgICAgICAgICAgICAgICAuc2V0Q29sb3IoYERBUktfQkxVRWApXHJcbiAgICAgICAgICAgICAgICAuc2V0RGVzY3JpcHRpb24oYFxcYFxcYFxcYGluaVxcblsgJHtzZXJ2ZXJzfSBdXFxgXFxgXFxgYClcclxuICAgICAgICAgICAgbWVzc2FnZS51dGlsLnNlbmQoZ3VpbGRzKVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2UudXRpbC5yZXBseShgTm8gTm8gTm8uLi5gKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==