"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_akairo_1 = require("discord-akairo");
const discord_js_1 = require("discord.js");
class UserInfoCommand extends discord_akairo_1.Command {
    constructor() {
        super("userinfo", {
            aliases: ["userinfo", "ui"],
            category: "Public",
            description: {
                content: "Checks the ping of the latency to the API",
                examples: ["userinfo", "ui"],
                usages: "userinfo"
            },
            ratelimit: 3
        });
    }
    exec(message) {
        const status = {
            online: "<:gonline:671751463688601602> Online",
            dnd: "<:gdnd:671751511382032385> Do Not Disturb",
            idle: "<:gidle:671751492557865000> Idle",
            offline: "<:goffline:674039918904999977> Offline"
        };
        console.log(message.author.presence.clientStatus);
        let uiembed = new discord_js_1.MessageEmbed()
            .setColor("BLUE")
            .setThumbnail(message.author.displayAvatarURL())
            .addField(`Username:`, message.author.username, true)
            .addField(`User ID:`, message.author.id, true)
            .addField(`User Discriminator:`, message.author.discriminator, true)
            .addField(`User Created:`, message.author.createdAt.toLocaleString('en-GB'), true)
            .addField(`User Boosted:`, `${message.member.premiumSince ? message.member.premiumSince : "Not Boosted"}`, true)
            .addField(`User Joined`, message.member.joinedAt.toLocaleString('en-GB'), true)
            .addField(`User Bot:`, `${message.author.bot ? "Yes" : "No"}`, true)
            .addField(`User Nickname`, `${message.member.nickname || "None"}`, true)
            // .addField(`User Device(s)`, `${message.author.presence.clientStatus}`, true)
            .addField(`User Status Info:`, `**Status**: ${status[message.author.presence.status]}\n**Activity**: ${message.author.presence.activities.join(",\n") || "None"}`, true)
            .addField(`User Permissions`, `\`\`\`${message.member.permissions.toArray().join(", ")}\`\`\``)
            .addField(`User Roles:`, message.member.roles.map(r => r).filter(f => f.name !== '@everyone').join(", "));
        message.util.send(uiembed);
    }
}
exports.default = UserInfoCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlcmluZm8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvUHVibGljL3VzZXJpbmZvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbURBQXlDO0FBQ3pDLDJDQUFtRDtBQUVuRCxNQUFxQixlQUFnQixTQUFRLHdCQUFPO0lBQ2hEO1FBQ0ksS0FBSyxDQUFDLFVBQVUsRUFBRTtZQUNkLE9BQU8sRUFBRSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUM7WUFDM0IsUUFBUSxFQUFFLFFBQVE7WUFDbEIsV0FBVyxFQUFFO2dCQUNULE9BQU8sRUFBRSwyQ0FBMkM7Z0JBQ3BELFFBQVEsRUFBRSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUM7Z0JBQzVCLE1BQU0sRUFBRSxVQUFVO2FBQ3JCO1lBQ0QsU0FBUyxFQUFFLENBQUM7U0FDZixDQUFDLENBQUM7SUFDUCxDQUFDO0lBQ00sSUFBSSxDQUFDLE9BQWdCO1FBQ3hCLE1BQU0sTUFBTSxHQUFHO1lBQ1gsTUFBTSxFQUFFLHNDQUFzQztZQUM5QyxHQUFHLEVBQUUsMkNBQTJDO1lBQ2hELElBQUksRUFBRSxrQ0FBa0M7WUFDeEMsT0FBTyxFQUFFLHdDQUF3QztTQUNwRCxDQUFBO1FBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUNqRCxJQUFJLE9BQU8sR0FBRyxJQUFJLHlCQUFZLEVBQUU7YUFDM0IsUUFBUSxDQUFDLE1BQU0sQ0FBQzthQUNoQixZQUFZLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO2FBQy9DLFFBQVEsQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDO2FBQ3BELFFBQVEsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDO2FBQzdDLFFBQVEsQ0FBQyxxQkFBcUIsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUM7YUFDbkUsUUFBUSxDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxDQUFDO2FBQ2pGLFFBQVEsQ0FBQyxlQUFlLEVBQUUsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBRSxFQUFFLElBQUksQ0FBQzthQUMvRyxRQUFRLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsRUFBRSxJQUFJLENBQUM7YUFDOUUsUUFBUSxDQUFDLFdBQVcsRUFBRSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksQ0FBQzthQUNuRSxRQUFRLENBQUMsZUFBZSxFQUFFLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxRQUFRLElBQUksTUFBTSxFQUFFLEVBQUUsSUFBSSxDQUFDO1lBQ3hFLCtFQUErRTthQUM5RSxRQUFRLENBQUMsbUJBQW1CLEVBQUUsZUFBZSxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLG1CQUFtQixPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLE1BQU0sRUFBRSxFQUFFLElBQUksQ0FBQzthQUN2SyxRQUFRLENBQUMsa0JBQWtCLEVBQUUsU0FBUyxPQUFPLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQzthQUM5RixRQUFRLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7UUFDN0csT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDL0IsQ0FBQztDQUNKO0FBdENELGtDQXNDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1hbmQgfSBmcm9tIFwiZGlzY29yZC1ha2Fpcm9cIjtcclxuaW1wb3J0IHsgTWVzc2FnZSwgTWVzc2FnZUVtYmVkIH0gZnJvbSBcImRpc2NvcmQuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJJbmZvQ29tbWFuZCBleHRlbmRzIENvbW1hbmQge1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFwidXNlcmluZm9cIiwge1xyXG4gICAgICAgICAgICBhbGlhc2VzOiBbXCJ1c2VyaW5mb1wiLCBcInVpXCJdLFxyXG4gICAgICAgICAgICBjYXRlZ29yeTogXCJQdWJsaWNcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiQ2hlY2tzIHRoZSBwaW5nIG9mIHRoZSBsYXRlbmN5IHRvIHRoZSBBUElcIixcclxuICAgICAgICAgICAgICAgIGV4YW1wbGVzOiBbXCJ1c2VyaW5mb1wiLCBcInVpXCJdLFxyXG4gICAgICAgICAgICAgICAgdXNhZ2VzOiBcInVzZXJpbmZvXCJcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcmF0ZWxpbWl0OiAzXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZXhlYyhtZXNzYWdlOiBNZXNzYWdlKSB7XHJcbiAgICAgICAgY29uc3Qgc3RhdHVzID0ge1xyXG4gICAgICAgICAgICBvbmxpbmU6IFwiPDpnb25saW5lOjY3MTc1MTQ2MzY4ODYwMTYwMj4gT25saW5lXCIsXHJcbiAgICAgICAgICAgIGRuZDogXCI8OmdkbmQ6NjcxNzUxNTExMzgyMDMyMzg1PiBEbyBOb3QgRGlzdHVyYlwiLFxyXG4gICAgICAgICAgICBpZGxlOiBcIjw6Z2lkbGU6NjcxNzUxNDkyNTU3ODY1MDAwPiBJZGxlXCIsXHJcbiAgICAgICAgICAgIG9mZmxpbmU6IFwiPDpnb2ZmbGluZTo2NzQwMzk5MTg5MDQ5OTk5Nzc+IE9mZmxpbmVcIlxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLmxvZyhtZXNzYWdlLmF1dGhvci5wcmVzZW5jZS5jbGllbnRTdGF0dXMpXHJcbiAgICAgICAgbGV0IHVpZW1iZWQgPSBuZXcgTWVzc2FnZUVtYmVkKClcclxuICAgICAgICAgICAgLnNldENvbG9yKFwiQkxVRVwiKVxyXG4gICAgICAgICAgICAuc2V0VGh1bWJuYWlsKG1lc3NhZ2UuYXV0aG9yLmRpc3BsYXlBdmF0YXJVUkwoKSlcclxuICAgICAgICAgICAgLmFkZEZpZWxkKGBVc2VybmFtZTpgLCBtZXNzYWdlLmF1dGhvci51c2VybmFtZSwgdHJ1ZSlcclxuICAgICAgICAgICAgLmFkZEZpZWxkKGBVc2VyIElEOmAsIG1lc3NhZ2UuYXV0aG9yLmlkLCB0cnVlKVxyXG4gICAgICAgICAgICAuYWRkRmllbGQoYFVzZXIgRGlzY3JpbWluYXRvcjpgLCBtZXNzYWdlLmF1dGhvci5kaXNjcmltaW5hdG9yLCB0cnVlKVxyXG4gICAgICAgICAgICAuYWRkRmllbGQoYFVzZXIgQ3JlYXRlZDpgLCBtZXNzYWdlLmF1dGhvci5jcmVhdGVkQXQudG9Mb2NhbGVTdHJpbmcoJ2VuLUdCJyksIHRydWUpXHJcbiAgICAgICAgICAgIC5hZGRGaWVsZChgVXNlciBCb29zdGVkOmAsIGAke21lc3NhZ2UubWVtYmVyLnByZW1pdW1TaW5jZSA/IG1lc3NhZ2UubWVtYmVyLnByZW1pdW1TaW5jZSA6IFwiTm90IEJvb3N0ZWRcIn1gLCB0cnVlKVxyXG4gICAgICAgICAgICAuYWRkRmllbGQoYFVzZXIgSm9pbmVkYCwgbWVzc2FnZS5tZW1iZXIuam9pbmVkQXQudG9Mb2NhbGVTdHJpbmcoJ2VuLUdCJyksIHRydWUpXHJcbiAgICAgICAgICAgIC5hZGRGaWVsZChgVXNlciBCb3Q6YCwgYCR7bWVzc2FnZS5hdXRob3IuYm90ID8gXCJZZXNcIiA6IFwiTm9cIn1gLCB0cnVlKVxyXG4gICAgICAgICAgICAuYWRkRmllbGQoYFVzZXIgTmlja25hbWVgLCBgJHttZXNzYWdlLm1lbWJlci5uaWNrbmFtZSB8fCBcIk5vbmVcIn1gLCB0cnVlKVxyXG4gICAgICAgICAgICAvLyAuYWRkRmllbGQoYFVzZXIgRGV2aWNlKHMpYCwgYCR7bWVzc2FnZS5hdXRob3IucHJlc2VuY2UuY2xpZW50U3RhdHVzfWAsIHRydWUpXHJcbiAgICAgICAgICAgIC5hZGRGaWVsZChgVXNlciBTdGF0dXMgSW5mbzpgLCBgKipTdGF0dXMqKjogJHtzdGF0dXNbbWVzc2FnZS5hdXRob3IucHJlc2VuY2Uuc3RhdHVzXX1cXG4qKkFjdGl2aXR5Kio6ICR7bWVzc2FnZS5hdXRob3IucHJlc2VuY2UuYWN0aXZpdGllcy5qb2luKFwiLFxcblwiKSB8fCBcIk5vbmVcIn1gLCB0cnVlKVxyXG4gICAgICAgICAgICAuYWRkRmllbGQoYFVzZXIgUGVybWlzc2lvbnNgLCBgXFxgXFxgXFxgJHttZXNzYWdlLm1lbWJlci5wZXJtaXNzaW9ucy50b0FycmF5KCkuam9pbihcIiwgXCIpfVxcYFxcYFxcYGApXHJcbiAgICAgICAgICAgIC5hZGRGaWVsZChgVXNlciBSb2xlczpgLCBtZXNzYWdlLm1lbWJlci5yb2xlcy5tYXAociA9PiByKS5maWx0ZXIoZiA9PiBmLm5hbWUgIT09ICdAZXZlcnlvbmUnKS5qb2luKFwiLCBcIikpXHJcbiAgICAgICAgbWVzc2FnZS51dGlsLnNlbmQodWllbWJlZCk7XHJcbiAgICB9XHJcbn0iXX0=