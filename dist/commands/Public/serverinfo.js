"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_akairo_1 = require("discord-akairo");
const discord_js_1 = require("discord.js");
class ServerinfoCommand extends discord_akairo_1.Command {
    constructor() {
        super("serverinfo", {
            aliases: ["serverinfo", "si"],
            category: "Public",
            description: {
                content: "Shows your server info",
                examples: ["serverinfo"],
                usages: "serverinfo"
            },
            ratelimit: 2
        });
    }
    exec(message) {
        let serverBanner = new discord_js_1.MessageEmbed()
            .setColor("DARK_BLUE")
            .setImage(message.guild.bannerURL());
        let siembed = new discord_js_1.MessageEmbed()
            .setColor("DARK_BLUE")
            .setThumbnail(message.guild.iconURL())
            // .setImage(message.guild.bannerURL({ size: 2048 }))
            .addField(`Server Name:`, message.guild.name, true)
            .addField(`Server ID:`, message.guild.id, true)
            .addField(`Server Created:`, message.guild.createdAt.toLocaleString('en-GB'), true)
            .addField(`Server AFK Channel`, message.guild.afkChannel ? message.guild.afkChannel : "Not Set", true)
            .addField(`Server Owner:`, message.guild.owner, true)
            .addField(`Server Boosts:`, message.guild.premiumSubscriptionCount, true)
            .addField("Server Total / Humans / Bots:", `${message.guild.members.size.toLocaleString()} / ${message.guild.members.filter(member => !member.user.bot).size.toLocaleString()} /  ${message.guild.members.filter(member => member.user.bot).size.toLocaleString()}`)
            .addField(`Server Channels: Text / Voice:`, `${message.guild.channels.filter(f => f.type == 'text').size} / ${message.guild.channels.filter(f => f.type == 'voice').size}`)
            .addField("Server Region:", `${message.guild.region}`, true)
            .addField(`Server Tier:`, message.guild.premiumTier, true)
            .addField(`Server Partnered:`, `${message.guild.partnered ? "Yes" : "No"}`, true)
            .addField(`Server Vanity URL:`, `${message.guild.vanityURLCode ? message.guild.vanityURLCode : "None"}`, true)
            .addField(`Server Roles:`, message.guild.roles.map(e => e).filter(f => f.name !== '@everyone').join(", "))
            .addField(`Server Features:`, `\`\`\`${message.guild.features[0] ? message.guild.features.join(", ") : "No Features Achieved!"}\`\`\``)
            .setFooter(`To view server banner type \`:?serverbanner\``);
        message.util.send(siembed);
    }
}
exports.default = ServerinfoCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyaW5mby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9QdWJsaWMvc2VydmVyaW5mby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1EQUF5QztBQUN6QywyQ0FBbUQ7QUFFbkQsTUFBcUIsaUJBQWtCLFNBQVEsd0JBQU87SUFDbEQ7UUFDSSxLQUFLLENBQUMsWUFBWSxFQUFFO1lBQ2hCLE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUM7WUFDN0IsUUFBUSxFQUFFLFFBQVE7WUFDbEIsV0FBVyxFQUFFO2dCQUNULE9BQU8sRUFBRSx3QkFBd0I7Z0JBQ2pDLFFBQVEsRUFBRSxDQUFDLFlBQVksQ0FBQztnQkFDeEIsTUFBTSxFQUFFLFlBQVk7YUFDdkI7WUFDRCxTQUFTLEVBQUUsQ0FBQztTQUNmLENBQUMsQ0FBQztJQUNQLENBQUM7SUFDTSxJQUFJLENBQUMsT0FBZ0I7UUFDeEIsSUFBSSxZQUFZLEdBQUcsSUFBSSx5QkFBWSxFQUFFO2FBQ2hDLFFBQVEsQ0FBQyxXQUFXLENBQUM7YUFDckIsUUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQTtRQUN4QyxJQUFJLE9BQU8sR0FBRyxJQUFJLHlCQUFZLEVBQUU7YUFDM0IsUUFBUSxDQUFDLFdBQVcsQ0FBQzthQUNyQixZQUFZLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUN0QyxxREFBcUQ7YUFDcEQsUUFBUSxDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUM7YUFDbEQsUUFBUSxDQUFDLFlBQVksRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUM7YUFDOUMsUUFBUSxDQUFDLGlCQUFpQixFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENB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cm9cIjtcclxuaW1wb3J0IHsgTWVzc2FnZUVtYmVkLCBNZXNzYWdlIH0gZnJvbSBcImRpc2NvcmQuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlcnZlcmluZm9Db21tYW5kIGV4dGVuZHMgQ29tbWFuZCB7XHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoXCJzZXJ2ZXJpbmZvXCIsIHtcclxuICAgICAgICAgICAgYWxpYXNlczogW1wic2VydmVyaW5mb1wiLCBcInNpXCJdLFxyXG4gICAgICAgICAgICBjYXRlZ29yeTogXCJQdWJsaWNcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiU2hvd3MgeW91ciBzZXJ2ZXIgaW5mb1wiLFxyXG4gICAgICAgICAgICAgICAgZXhhbXBsZXM6IFtcInNlcnZlcmluZm9cIl0sXHJcbiAgICAgICAgICAgICAgICB1c2FnZXM6IFwic2VydmVyaW5mb1wiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJhdGVsaW1pdDogMlxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGV4ZWMobWVzc2FnZTogTWVzc2FnZSkge1xyXG4gICAgICAgIGxldCBzZXJ2ZXJCYW5uZXIgPSBuZXcgTWVzc2FnZUVtYmVkKClcclxuICAgICAgICAgICAgLnNldENvbG9yKFwiREFSS19CTFVFXCIpXHJcbiAgICAgICAgICAgIC5zZXRJbWFnZShtZXNzYWdlLmd1aWxkLmJhbm5lclVSTCgpKVxyXG4gICAgICAgIGxldCBzaWVtYmVkID0gbmV3IE1lc3NhZ2VFbWJlZCgpXHJcbiAgICAgICAgICAgIC5zZXRDb2xvcihcIkRBUktfQkxVRVwiKVxyXG4gICAgICAgICAgICAuc2V0VGh1bWJuYWlsKG1lc3NhZ2UuZ3VpbGQuaWNvblVSTCgpKVxyXG4gICAgICAgICAgICAvLyAuc2V0SW1hZ2UobWVzc2FnZS5ndWlsZC5iYW5uZXJVUkwoeyBzaXplOiAyMDQ4IH0pKVxyXG4gICAgICAgICAgICAuYWRkRmllbGQoYFNlcnZlciBOYW1lOmAsIG1lc3NhZ2UuZ3VpbGQubmFtZSwgdHJ1ZSlcclxuICAgICAgICAgICAgLmFkZEZpZWxkKGBTZXJ2ZXIgSUQ6YCwgbWVzc2FnZS5ndWlsZC5pZCwgdHJ1ZSlcclxuICAgICAgICAgICAgLmFkZEZpZWxkKGBTZXJ2ZXIgQ3JlYXRlZDpgLCBtZXNzYWdlLmd1aWxkLmNyZWF0ZWRBdC50b0xvY2FsZVN0cmluZygnZW4tR0InKSwgdHJ1ZSlcclxuICAgICAgICAgICAgLmFkZEZpZWxkKGBTZXJ2ZXIgQUZLIENoYW5uZWxgLCBtZXNzYWdlLmd1aWxkLmFma0NoYW5uZWwgPyBtZXNzYWdlLmd1aWxkLmFma0NoYW5uZWwgOiBcIk5vdCBTZXRcIiwgdHJ1ZSlcclxuICAgICAgICAgICAgLmFkZEZpZWxkKGBTZXJ2ZXIgT3duZXI6YCwgbWVzc2FnZS5ndWlsZC5vd25lciwgdHJ1ZSlcclxuICAgICAgICAgICAgLmFkZEZpZWxkKGBTZXJ2ZXIgQm9vc3RzOmAsIG1lc3NhZ2UuZ3VpbGQucHJlbWl1bVN1YnNjcmlwdGlvbkNvdW50LCB0cnVlKVxyXG4gICAgICAgICAgICAuYWRkRmllbGQoXCJTZXJ2ZXIgVG90YWwgLyBIdW1hbnMgLyBCb3RzOlwiLCBgJHttZXNzYWdlLmd1aWxkLm1lbWJlcnMuc2l6ZS50b0xvY2FsZVN0cmluZygpfSAvICR7bWVzc2FnZS5ndWlsZC5tZW1iZXJzLmZpbHRlcihtZW1iZXIgPT4gIW1lbWJlci51c2VyLmJvdCkuc2l6ZS50b0xvY2FsZVN0cmluZygpfSAvICAke21lc3NhZ2UuZ3VpbGQubWVtYmVycy5maWx0ZXIobWVtYmVyID0+IG1lbWJlci51c2VyLmJvdCkuc2l6ZS50b0xvY2FsZVN0cmluZygpfWApXHJcbiAgICAgICAgICAgIC5hZGRGaWVsZChgU2VydmVyIENoYW5uZWxzOiBUZXh0IC8gVm9pY2U6YCwgYCR7bWVzc2FnZS5ndWlsZC5jaGFubmVscy5maWx0ZXIoZiA9PiBmLnR5cGUgPT0gJ3RleHQnKS5zaXplfSAvICR7bWVzc2FnZS5ndWlsZC5jaGFubmVscy5maWx0ZXIoZiA9PiBmLnR5cGUgPT0gJ3ZvaWNlJykuc2l6ZX1gKVxyXG4gICAgICAgICAgICAuYWRkRmllbGQoXCJTZXJ2ZXIgUmVnaW9uOlwiLCBgJHttZXNzYWdlLmd1aWxkLnJlZ2lvbn1gLCB0cnVlKVxyXG4gICAgICAgICAgICAuYWRkRmllbGQoYFNlcnZlciBUaWVyOmAsIG1lc3NhZ2UuZ3VpbGQucHJlbWl1bVRpZXIsIHRydWUpXHJcbiAgICAgICAgICAgIC5hZGRGaWVsZChgU2VydmVyIFBhcnRuZXJlZDpgLCBgJHttZXNzYWdlLmd1aWxkLnBhcnRuZXJlZCA/IFwiWWVzXCIgOiBcIk5vXCJ9YCwgdHJ1ZSlcclxuICAgICAgICAgICAgLmFkZEZpZWxkKGBTZXJ2ZXIgVmFuaXR5IFVSTDpgLCBgJHttZXNzYWdlLmd1aWxkLnZhbml0eVVSTENvZGUgPyBtZXNzYWdlLmd1aWxkLnZhbml0eVVSTENvZGUgOiBcIk5vbmVcIn1gLCB0cnVlKVxyXG4gICAgICAgICAgICAuYWRkRmllbGQoYFNlcnZlciBSb2xlczpgLCBtZXNzYWdlLmd1aWxkLnJvbGVzLm1hcChlID0+IGUpLmZpbHRlcihmID0+IGYubmFtZSAhPT0gJ0BldmVyeW9uZScpLmpvaW4oXCIsIFwiKSlcclxuICAgICAgICAgICAgLmFkZEZpZWxkKGBTZXJ2ZXIgRmVhdHVyZXM6YCwgYFxcYFxcYFxcYCR7bWVzc2FnZS5ndWlsZC5mZWF0dXJlc1swXSA/IG1lc3NhZ2UuZ3VpbGQuZmVhdHVyZXMuam9pbihcIiwgXCIpIDogXCJObyBGZWF0dXJlcyBBY2hpZXZlZCFcIn1cXGBcXGBcXGBgKVxyXG4gICAgICAgICAgICAuc2V0Rm9vdGVyKGBUbyB2aWV3IHNlcnZlciBiYW5uZXIgdHlwZSBcXGA6P3NlcnZlcmJhbm5lclxcYGApXHJcbiAgICAgICAgbWVzc2FnZS51dGlsLnNlbmQoc2llbWJlZClcclxuICAgIH1cclxufSJdfQ==