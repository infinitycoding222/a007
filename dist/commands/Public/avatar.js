"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_akairo_1 = require("discord-akairo");
const discord_js_1 = require("discord.js");
class AvatarCommand extends discord_akairo_1.Command {
    constructor() {
        super("avatar", {
            aliases: ["avatar", "av", "pfp"],
            category: "Public",
            description: {
                content: "Displays your or someone else's avatar",
                examples: [":?avatar Host"],
                usages: "<text>"
            },
            args: [{
                    id: 'member', type: 'string', match: 'content', default: null,
                }],
            ratelimit: 2
        });
    }
    async exec(message, args) {
        function resolveMember(member) {
            if (!member)
                return null;
            return message.guild.members.get(member) || message.guild.members.find(m => {
                let match = member.match(/<@!?(\d{17,19})>/);
                if (match && m.id === match[1])
                    return true;
                return m.displayName.toLowerCase().includes(member.toLowerCase()) || m.user.username.toLowerCase().includes(member.toLowerCase());
            });
        }
        let member = await message.mentions.users.first()
            || resolveMember(args[0])
            || message.author;
        let pfp = new discord_js_1.MessageEmbed()
            // .setAuthor(this.client.user.displayAvatarURL())
            .setImage(member.displayAvatarURL({ size: 2048 }));
        message.util.send(pfp);
    }
}
exports.default = AvatarCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZhdGFyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1hbmRzL1B1YmxpYy9hdmF0YXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBeUM7QUFDekMsMkNBQW1EO0FBRW5ELE1BQXFCLGFBQWMsU0FBUSx3QkFBTztJQUM5QztRQUNJLEtBQUssQ0FBQyxRQUFRLEVBQUU7WUFDWixPQUFPLEVBQUUsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQztZQUNoQyxRQUFRLEVBQUUsUUFBUTtZQUNsQixXQUFXLEVBQUU7Z0JBQ1QsT0FBTyxFQUFFLHdDQUF3QztnQkFDakQsUUFBUSxFQUFFLENBQUMsZUFBZSxDQUFDO2dCQUMzQixNQUFNLEVBQUUsUUFBUTthQUNuQjtZQUNELElBQUksRUFBRSxDQUFDO29CQUNILEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxJQUFJO2lCQUtoRSxDQUFDO1lBQ0YsU0FBUyxFQUFFLENBQUM7U0FDZixDQUFDLENBQUM7SUFDUCxDQUFDO0lBQ00sS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBYTtRQUNwQyxTQUFTLGFBQWEsQ0FBQyxNQUFNO1lBQ3pCLElBQUksQ0FBQyxNQUFNO2dCQUFFLE9BQU8sSUFBSSxDQUFDO1lBQ3pCLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDdkUsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO2dCQUM3QyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUMsRUFBRSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7b0JBQUUsT0FBTyxJQUFJLENBQUM7Z0JBQzVDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1lBQ3RJLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQztRQUNELElBQUksTUFBTSxHQUFHLE1BQU0sT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFO2VBQzFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7ZUFDdEIsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUN0QixJQUFJLEdBQUcsR0FBRyxJQUFJLHlCQUFZLEVBQUU7WUFDeEIsa0RBQWtEO2FBQ2pELFFBQVEsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQ3RELE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBRTFCLENBQUM7Q0FDSjtBQXRDRCxnQ0FzQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tYW5kIH0gZnJvbSBcImRpc2NvcmQtYWthaXJvXCI7XHJcbmltcG9ydCB7IE1lc3NhZ2VFbWJlZCwgTWVzc2FnZSB9IGZyb20gXCJkaXNjb3JkLmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdmF0YXJDb21tYW5kIGV4dGVuZHMgQ29tbWFuZCB7XHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoXCJhdmF0YXJcIiwge1xyXG4gICAgICAgICAgICBhbGlhc2VzOiBbXCJhdmF0YXJcIiwgXCJhdlwiLCBcInBmcFwiXSxcclxuICAgICAgICAgICAgY2F0ZWdvcnk6IFwiUHVibGljXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50OiBcIkRpc3BsYXlzIHlvdXIgb3Igc29tZW9uZSBlbHNlJ3MgYXZhdGFyXCIsXHJcbiAgICAgICAgICAgICAgICBleGFtcGxlczogW1wiOj9hdmF0YXIgSG9zdFwiXSxcclxuICAgICAgICAgICAgICAgIHVzYWdlczogXCI8dGV4dD5cIlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhcmdzOiBbe1xyXG4gICAgICAgICAgICAgICAgaWQ6ICdtZW1iZXInLCB0eXBlOiAnc3RyaW5nJywgbWF0Y2g6ICdjb250ZW50JywgZGVmYXVsdDogbnVsbCxcclxuICAgICAgICAgICAgICAgIC8vIHByb21wdDoge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgIHN0YXJ0OiBgUGxlYXNlIG1lbnRpb24gYSBtZW1iZXJgLFxyXG4gICAgICAgICAgICAgICAgLy8gICAgIHJldHJ5OiBgUGxlYXNlIG1lbnRpb24gYSBtZW1iZXJgLFxyXG4gICAgICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgcmF0ZWxpbWl0OiAyXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgYXN5bmMgZXhlYyhtZXNzYWdlLCBhcmdzOiBNZXNzYWdlKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZU1lbWJlcihtZW1iZXIpIHtcclxuICAgICAgICAgICAgaWYgKCFtZW1iZXIpIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICByZXR1cm4gbWVzc2FnZS5ndWlsZC5tZW1iZXJzLmdldChtZW1iZXIpIHx8IG1lc3NhZ2UuZ3VpbGQubWVtYmVycy5maW5kKG0gPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IG1hdGNoID0gbWVtYmVyLm1hdGNoKC88QCE/KFxcZHsxNywxOX0pPi8pO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoICYmIG0uaWQgPT09IG1hdGNoWzFdKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBtLmRpc3BsYXlOYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMobWVtYmVyLnRvTG93ZXJDYXNlKCkpIHx8IG0udXNlci51c2VybmFtZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKG1lbWJlci50b0xvd2VyQ2FzZSgpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBtZW1iZXIgPSBhd2FpdCBtZXNzYWdlLm1lbnRpb25zLnVzZXJzLmZpcnN0KClcclxuICAgICAgICAgICAgfHwgcmVzb2x2ZU1lbWJlcihhcmdzWzBdKVxyXG4gICAgICAgICAgICB8fCBtZXNzYWdlLmF1dGhvcjtcclxuICAgICAgICBsZXQgcGZwID0gbmV3IE1lc3NhZ2VFbWJlZCgpXHJcbiAgICAgICAgICAgIC8vIC5zZXRBdXRob3IodGhpcy5jbGllbnQudXNlci5kaXNwbGF5QXZhdGFyVVJMKCkpXHJcbiAgICAgICAgICAgIC5zZXRJbWFnZShtZW1iZXIuZGlzcGxheUF2YXRhclVSTCh7IHNpemU6IDIwNDggfSkpXHJcbiAgICAgICAgbWVzc2FnZS51dGlsLnNlbmQocGZwKVxyXG5cclxuICAgIH1cclxufSJdfQ==