"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_akairo_1 = require("discord-akairo");
const discord_js_1 = require("discord.js");
class BotInfoCommand extends discord_akairo_1.Command {
    constructor() {
        super('botinfo', {
            aliases: ['botinfo', "bi", 'stats'],
            category: 'Public',
            description: {
                content: "Shows the bot info",
                examples: ["stats", "bi"],
                usages: "botinfo"
            },
            ratelimit: 3,
            cooldown: 2000,
            args: [{
                    id: 'command',
                    type: 'commandAlias',
                    match: 'content'
                }]
        });
    }
    exec(message) {
        function duration(ms) {
            const times = {
                day: Math.floor((ms / (1000 * 60 * 60 * 24))),
                hour: Math.floor((ms / (1000 * 60 * 60)) % 24),
                minute: Math.floor((ms / (1000 * 60)) % 60),
                second: Math.floor((ms / 1000) % 60),
                week: Math.floor((ms / (1000 * 60 * 60 * 24 * 7)))
            };
            let string = '';
            for (const [key, value] of Object.entries(times)) {
                if (value > 0)
                    string += `${value} ${key}${value > 1 ? 's' : ''} `;
            }
            return `\`${string}\``;
        }
        let biembed = new discord_js_1.MessageEmbed()
            .setColor("DARK_RED")
            .setThumbnail(this.client.user.displayAvatarURL())
            .addField(`Bot Name`, this.client.user.username, true)
            .addField(`Bot Discriminator`, this.client.user.discriminator, true)
            .addField(`Bot was born at`, this.client.user.createdAt.toLocaleString(), true)
            .addField(`Servers`, this.client.guilds.size, true)
            .addField(`Users`, this.client.users.size, true)
            .addField(`Channels`, this.client.channels.size, true)
            .addField(`Emojis`, this.client.emojis.size, true)
            .addField(`Prefix`, `:?`, true)
            .addField(`Owners`, `${["473276250815856650", "540219416726601739"].map(u => this.client.users.get(u).tag).join("\n")}`, true)
            .addField(`Uptime`, duration(this.client.uptime), true)
            // .addBlankField(true)
            // .addBlankField(true)
            // .addBlankField(true)
            .addField(`NodeJS`, process.version, true)
            .addField(`Discord-Akairo`, discord_akairo_1.version, true)
            .addField(`Discord.JS`, `v12.0.0-dev`, true);
        message.util.send(biembed);
    }
}
exports.default = BotInfoCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm90aW5mby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9QdWJsaWMvYm90aW5mby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1EQUFrRDtBQUNsRCwyQ0FBbUQ7QUFHbkQsTUFBcUIsY0FBZSxTQUFRLHdCQUFPO0lBQy9DO1FBQ0ksS0FBSyxDQUFDLFNBQVMsRUFBRTtZQUNiLE9BQU8sRUFBRSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDO1lBQ25DLFFBQVEsRUFBRSxRQUFRO1lBQ2xCLFdBQVcsRUFBRTtnQkFDVCxPQUFPLEVBQUUsb0JBQW9CO2dCQUM3QixRQUFRLEVBQUUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDO2dCQUN6QixNQUFNLEVBQUUsU0FBUzthQUNwQjtZQUNELFNBQVMsRUFBRSxDQUFDO1lBQ1osUUFBUSxFQUFFLElBQUk7WUFDZCxJQUFJLEVBQUUsQ0FBQztvQkFDSCxFQUFFLEVBQUUsU0FBUztvQkFDYixJQUFJLEVBQUUsY0FBYztvQkFDcEIsS0FBSyxFQUFFLFNBQVM7aUJBQ25CLENBQUM7U0FDTCxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU0sSUFBSSxDQUFDLE9BQWdCO1FBQ3hCLFNBQVMsUUFBUSxDQUFDLEVBQUU7WUFDaEIsTUFBTSxLQUFLLEdBQUc7Z0JBQ1osR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUM3QyxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7Z0JBQzlDLE1BQU0sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxHQUFH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RCxpQ0EwREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tYW5kLCB2ZXJzaW9uIH0gZnJvbSAnZGlzY29yZC1ha2Fpcm8nO1xyXG5pbXBvcnQgeyBNZXNzYWdlRW1iZWQsIE1lc3NhZ2UgfSBmcm9tICdkaXNjb3JkLmpzJztcclxuaW1wb3J0IG1zIGZyb20gXCJtc1wiXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCb3RJbmZvQ29tbWFuZCBleHRlbmRzIENvbW1hbmQge1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCdib3RpbmZvJywge1xyXG4gICAgICAgICAgICBhbGlhc2VzOiBbJ2JvdGluZm8nLCBcImJpXCIsICdzdGF0cyddLFxyXG4gICAgICAgICAgICBjYXRlZ29yeTogJ1B1YmxpYycsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50OiBcIlNob3dzIHRoZSBib3QgaW5mb1wiLFxyXG4gICAgICAgICAgICAgICAgZXhhbXBsZXM6IFtcInN0YXRzXCIsIFwiYmlcIl0sXHJcbiAgICAgICAgICAgICAgICB1c2FnZXM6IFwiYm90aW5mb1wiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJhdGVsaW1pdDogMyxcclxuICAgICAgICAgICAgY29vbGRvd246IDIwMDAsXHJcbiAgICAgICAgICAgIGFyZ3M6IFt7XHJcbiAgICAgICAgICAgICAgICBpZDogJ2NvbW1hbmQnLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2NvbW1hbmRBbGlhcycsXHJcbiAgICAgICAgICAgICAgICBtYXRjaDogJ2NvbnRlbnQnXHJcbiAgICAgICAgICAgIH1dXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGV4ZWMobWVzc2FnZTogTWVzc2FnZSkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGR1cmF0aW9uKG1zKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRpbWVzID0ge1xyXG4gICAgICAgICAgICAgIGRheTogTWF0aC5mbG9vcigobXMgLyAoMTAwMCAqIDYwICogNjAgKiAyNCkpKSxcclxuICAgICAgICAgICAgICBob3VyOiBNYXRoLmZsb29yKChtcyAvICgxMDAwICogNjAgKiA2MCkpICUgMjQpLFxyXG4gICAgICAgICAgICAgIG1pbnV0ZTogTWF0aC5mbG9vcigobXMgLyAoMTAwMCAqIDYwKSkgJSA2MCksXHJcbiAgICAgICAgICAgICAgc2Vjb25kOiBNYXRoLmZsb29yKChtcyAvIDEwMDApICUgNjApLFxyXG4gICAgICAgICAgICAgIHdlZWs6IE1hdGguZmxvb3IoKG1zIC8gKDEwMDAgKiA2MCAqIDYwICogMjQgKiA3KSkpXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICBcclxuICAgICAgICAgICAgbGV0IHN0cmluZyA9ICcnO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAgICAgZm9yICggY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHRpbWVzKSApIHtcclxuICAgICAgICAgICAgICAgIGlmKHZhbHVlID4gMCkgc3RyaW5nICs9IGAke3ZhbHVlfSAke2tleX0ke3ZhbHVlID4gMSA/ICdzJyA6ICcnfSBgXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGBcXGAke3N0cmluZ31cXGBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgbGV0IGJpZW1iZWQgPSBuZXcgTWVzc2FnZUVtYmVkKClcclxuICAgICAgICAgICAgLnNldENvbG9yKFwiREFSS19SRURcIilcclxuICAgICAgICAgICAgLnNldFRodW1ibmFpbCh0aGlzLmNsaWVudC51c2VyLmRpc3BsYXlBdmF0YXJVUkwoKSlcclxuICAgICAgICAgICAgLmFkZEZpZWxkKGBCb3QgTmFtZWAsIHRoaXMuY2xpZW50LnVzZXIudXNlcm5hbWUsIHRydWUpXHJcbiAgICAgICAgICAgIC5hZGRGaWVsZChgQm90IERpc2NyaW1pbmF0b3JgLCB0aGlzLmNsaWVudC51c2VyLmRpc2NyaW1pbmF0b3IsIHRydWUpXHJcbiAgICAgICAgICAgIC5hZGRGaWVsZChgQm90IHdhcyBib3JuIGF0YCwgdGhpcy5jbGllbnQudXNlci5jcmVhdGVkQXQudG9Mb2NhbGVTdHJpbmcoKSwgdHJ1ZSlcclxuICAgICAgICAgICAgLmFkZEZpZWxkKGBTZXJ2ZXJzYCwgdGhpcy5jbGllbnQuZ3VpbGRzLnNpemUsIHRydWUpXHJcbiAgICAgICAgICAgIC5hZGRGaWVsZChgVXNlcnNgLCB0aGlzLmNsaWVudC51c2Vycy5zaXplLCB0cnVlKVxyXG4gICAgICAgICAgICAuYWRkRmllbGQoYENoYW5uZWxzYCwgdGhpcy5jbGllbnQuY2hhbm5lbHMuc2l6ZSwgdHJ1ZSlcclxuICAgICAgICAgICAgLmFkZEZpZWxkKGBFbW9qaXNgLCB0aGlzLmNsaWVudC5lbW9qaXMuc2l6ZSwgdHJ1ZSlcclxuICAgICAgICAgICAgLmFkZEZpZWxkKGBQcmVmaXhgLCBgOj9gLCB0cnVlKVxyXG4gICAgICAgICAgICAuYWRkRmllbGQoYE93bmVyc2AsIGAke1tcIjQ3MzI3NjI1MDgxNTg1NjY1MFwiLCBcIjU0MDIxOTQxNjcyNjYwMTczOVwiXS5tYXAodSA9PiB0aGlzLmNsaWVudC51c2Vycy5nZXQodSkudGFnKS5qb2luKFwiXFxuXCIpfWAsIHRydWUpXHJcbiAgICAgICAgICAgLmFkZEZpZWxkKGBVcHRpbWVgLCBkdXJhdGlvbih0aGlzLmNsaWVudC51cHRpbWUpLCB0cnVlKVxyXG4gICAgICAgICAgICAvLyAuYWRkQmxhbmtGaWVsZCh0cnVlKVxyXG4gICAgICAgICAgICAvLyAuYWRkQmxhbmtGaWVsZCh0cnVlKVxyXG4gICAgICAgICAgICAvLyAuYWRkQmxhbmtGaWVsZCh0cnVlKVxyXG4gICAgICAgICAgICAuYWRkRmllbGQoYE5vZGVKU2AsIHByb2Nlc3MudmVyc2lvbiwgdHJ1ZSlcclxuICAgICAgICAgICAgLmFkZEZpZWxkKGBEaXNjb3JkLUFrYWlyb2AsIHZlcnNpb24sIHRydWUpXHJcbiAgICAgICAgICAgIC5hZGRGaWVsZChgRGlzY29yZC5KU2AsIGB2MTIuMC4wLWRldmAsIHRydWUpXHJcbiAgICAgICAgbWVzc2FnZS51dGlsLnNlbmQoYmllbWJlZClcclxuICAgIH1cclxufSJdfQ==