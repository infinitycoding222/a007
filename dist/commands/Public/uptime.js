"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_akairo_1 = require("discord-akairo");
const discord_js_1 = require("discord.js");
class upTimeCommand extends discord_akairo_1.Command {
    constructor() {
        super("uptime", {
            aliases: ["uptime"],
            category: "Public",
            description: {
                content: "Shows the bot uptime",
                examples: ["uptime"],
                usages: "uptime"
            },
            ratelimit: 3
        });
    }
    exec(message) {
        function duration(ms) {
            const times = {
                day: Math.floor((ms / (1000 * 60 * 60 * 24))),
                hour: Math.floor((ms / (1000 * 60 * 60)) % 24),
                minute: Math.floor((ms / (1000 * 60)) % 60),
                second: Math.floor((ms / 1000) % 60),
                week: Math.floor((ms / (1000 * 60 * 60 * 24 * 7)))
            };
            let string = '';
            for (const [key, value] of Object.entries(times)) {
                if (value > 0)
                    string += `${value} ${key}${value > 1 ? 's' : ''} `;
            }
            return `\`${string}\``;
        }
        return message.util.send(new discord_js_1.MessageEmbed()
            .setColor('DARK_BLUE')
            .setDescription(`${duration(this.client.uptime)}`));
    }
}
exports.default = upTimeCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXB0aW1lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1hbmRzL1B1YmxpYy91cHRpbWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBeUM7QUFDekMsMkNBQW1EO0FBR25ELE1BQXFCLGFBQWMsU0FBUSx3QkFBTztJQUNoRDtRQUNFLEtBQUssQ0FBQyxRQUFRLEVBQUU7WUFDZCxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7WUFDbkIsUUFBUSxFQUFFLFFBQVE7WUFDbEIsV0FBVyxFQUFFO2dCQUNYLE9BQU8sRUFBRSxzQkFBc0I7Z0JBQy9CLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQztnQkFDcEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRCxTQUFTLEVBQUUsQ0FBQztTQUNiLENBQUMsQ0FBQztJQUNMLENBQUM7SUFDTSxJQUFJLENBQUMsT0FBZ0I7UUFDMUIsU0FBUyxRQUFRLENBQUMsRUFBRTtZQUNsQixNQUFNLEtBQUssR0FBRztnQkFDWixHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQzdDLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztnQkFDOUMsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7Z0JBQzNDLE1BQU0sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztnQkFDcEMsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNuRCxDQUFDO1lBRUYsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO1lBRWhCLEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNoRCxJQUFJLEtBQUssR0FBRyxDQUFDO29CQUFFLE1BQU0sSUFBSSxHQUFHLEtBQUssSUFBSSxHQUFHLEdBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQTthQUNuRTtZQUNELE9BQU8sS0FBSyxNQUFNLElBQUksQ0FBQTtRQUN4QixDQUFDO1FBRUQsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLHlCQUFZLEVBQUU7YUFDeEMsUUFBUSxDQUFDLFdBQVcsQ0FBQzthQUNyQixjQUFjLENBQUMsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN4RCxDQUFDO0NBQ0Y7QUFuQ0QsZ0NBbUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbWFuZCB9IGZyb20gXCJkaXNjb3JkLWFrYWlyb1wiO1xyXG5pbXBvcnQgeyBNZXNzYWdlLCBNZXNzYWdlRW1iZWQgfSBmcm9tIFwiZGlzY29yZC5qc1wiO1xyXG5pbXBvcnQgbXMgZnJvbSBcIm1zXCJcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHVwVGltZUNvbW1hbmQgZXh0ZW5kcyBDb21tYW5kIHtcclxuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcihcInVwdGltZVwiLCB7XHJcbiAgICAgIGFsaWFzZXM6IFtcInVwdGltZVwiXSxcclxuICAgICAgY2F0ZWdvcnk6IFwiUHVibGljXCIsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiB7XHJcbiAgICAgICAgY29udGVudDogXCJTaG93cyB0aGUgYm90IHVwdGltZVwiLFxyXG4gICAgICAgIGV4YW1wbGVzOiBbXCJ1cHRpbWVcIl0sXHJcbiAgICAgICAgdXNhZ2VzOiBcInVwdGltZVwiXHJcbiAgICAgIH0sXHJcbiAgICAgIHJhdGVsaW1pdDogM1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIHB1YmxpYyBleGVjKG1lc3NhZ2U6IE1lc3NhZ2UpIHtcclxuICAgIGZ1bmN0aW9uIGR1cmF0aW9uKG1zKSB7XHJcbiAgICAgIGNvbnN0IHRpbWVzID0ge1xyXG4gICAgICAgIGRheTogTWF0aC5mbG9vcigobXMgLyAoMTAwMCAqIDYwICogNjAgKiAyNCkpKSxcclxuICAgICAgICBob3VyOiBNYXRoLmZsb29yKChtcyAvICgxMDAwICogNjAgKiA2MCkpICUgMjQpLFxyXG4gICAgICAgIG1pbnV0ZTogTWF0aC5mbG9vcigobXMgLyAoMTAwMCAqIDYwKSkgJSA2MCksXHJcbiAgICAgICAgc2Vjb25kOiBNYXRoLmZsb29yKChtcyAvIDEwMDApICUgNjApLFxyXG4gICAgICAgIHdlZWs6IE1hdGguZmxvb3IoKG1zIC8gKDEwMDAgKiA2MCAqIDYwICogMjQgKiA3KSkpXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBsZXQgc3RyaW5nID0gJyc7XHJcblxyXG4gICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh0aW1lcykpIHtcclxuICAgICAgICBpZiAodmFsdWUgPiAwKSBzdHJpbmcgKz0gYCR7dmFsdWV9ICR7a2V5fSR7dmFsdWUgPiAxID8gJ3MnIDogJyd9IGBcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gYFxcYCR7c3RyaW5nfVxcYGBcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbWVzc2FnZS51dGlsLnNlbmQobmV3IE1lc3NhZ2VFbWJlZCgpXHJcbiAgICAgIC5zZXRDb2xvcignREFSS19CTFVFJylcclxuICAgICAgLnNldERlc2NyaXB0aW9uKGAke2R1cmF0aW9uKHRoaXMuY2xpZW50LnVwdGltZSl9YCkpO1xyXG4gIH1cclxufSJdfQ==