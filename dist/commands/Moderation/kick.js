"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_akairo_1 = require("discord-akairo");
const discord_js_1 = require("discord.js");
class KickCommand extends discord_akairo_1.Command {
    constructor() {
        super('kick', {
            aliases: ['kick', "k"],
            category: 'Moderation',
            description: {
                content: "Kicks a user from the server",
                examples: [":?kick @User <reason>"],
                usages: "<@user> <reason>"
            },
            clientPermissions: ['KICK_MEMBERS'],
            userPermissions: ['KICK_MEMBERS'],
            ratelimit: 3,
            args: [{
                    id: 'member',
                    type: 'member',
                }]
        });
    }
    exec(message, args) {
        if (!message.member.permissions.has("BAN_MEMBERS"))
            return message.util.send("You do not have permission to perform this command!");
        let banMember = message.mentions.members.first() || message.guild.members.fetch(args[0]);
        if (!banMember)
            return message.util.send("Please provide a user to ban!");
        if (!message.guild.me.permissions.has(["BAN_MEMBERS", "ADMINISTRATOR"]))
            return message.util.send("I dont have permission to perform this command");
        banMember.send(`Hello, you have been banned from ${message.guild.name}`).then(() => banMember.kick(banMember)).catch(err => console.log(err));
        message.util.send(`**${banMember.user.tag}** has been banned`).then(m => m.delete(5000));
        let embed = new discord_js_1.MessageEmbed()
            .setColor("RED")
            // .setTitle(`[ Case ${casing} ]`)
            .setAuthor(`${message.guild.name} Modlogs`, message.guild.iconURL)
            .addField("Moderation:", "Ban", true)
            .addField("Mutee:", banMember.user.username, true)
            .addField("Moderator:", message.author.username, true)
            // .addField("Reason:", reason)
            .addField("Date:", message.createdAt.toLocaleString(), true);
        message.util.send(embed);
    }
}
exports.default = KickCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2ljay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9Nb2RlcmF0aW9uL2tpY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBa0Q7QUFDbEQsMkNBQW1EO0FBRW5ELE1BQXFCLFdBQVksU0FBUSx3QkFBTztJQUM1QztRQUNJLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDVixPQUFPLEVBQUUsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDO1lBQ3RCLFFBQVEsRUFBRSxZQUFZO1lBQ3RCLFdBQVcsRUFBRTtnQkFDVCxPQUFPLEVBQUUsOEJBQThCO2dCQUN2QyxRQUFRLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQztnQkFDbkMsTUFBTSxFQUFFLGtCQUFrQjthQUM3QjtZQUNELGlCQUFpQixFQUFFLENBQUMsY0FBYyxDQUFDO1lBQ25DLGVBQWUsRUFBRSxDQUFDLGNBQWMsQ0FBQztZQUNqQyxTQUFTLEVBQUUsQ0FBQztZQUNaLElBQUksRUFBRSxDQUFDO29CQUNILEVBQUUsRUFBRSxRQUFRO29CQUNaLElBQUksRUFBRSxRQUFRO2lCQUVqQixDQUFDO1NBQ0wsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVNLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBYTtRQUM5QixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQztZQUFFLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMscURBQXFELENBQUMsQ0FBQTtRQUVuSSxJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDeEYsSUFBSSxDQUFDLFNBQVM7WUFBRSxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLCtCQUErQixDQUFDLENBQUE7UUFFekUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxhQUFhLEVBQUUsZUFBZSxDQUFDLENBQUM7WUFBRSxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdEQUFnRCxDQUFDLENBQUE7UUFFbkosU0FBUyxDQUFDLElBQUksQ0FBQyxvQ0FBb0MsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FDL0UsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtRQUU3RCxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxvQkFBb0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtRQUV4RixJQUFJLEtBQUssR0FBRyxJQUFJLHlCQUFZLEVBQUU7YUFDekIsUUFBUSxDQUFDLEtBQUssQ0FBQztZQUNoQixrQ0FBa0M7YUFDakMsU0FBUyxDQUFDLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLFVBQVUsRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQzthQUNqRSxRQUFRLENBQUMsYUFBYSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUM7YUFDcEMsUUFBUSxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUM7YUFDakQsUUFBUSxDQUFDLFlBQVksRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUM7WUFDdEQsK0JBQStCO2FBQzlCLFFBQVEsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUNoRSxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUM1QixDQUFDO0NBQ0o7QUE3Q0QsOEJBNkNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbWFuZCwgdmVyc2lvbiB9IGZyb20gJ2Rpc2NvcmQtYWthaXJvJztcclxuaW1wb3J0IHsgTWVzc2FnZUVtYmVkLCBNZXNzYWdlIH0gZnJvbSAnZGlzY29yZC5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBLaWNrQ29tbWFuZCBleHRlbmRzIENvbW1hbmQge1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCdraWNrJywge1xyXG4gICAgICAgICAgICBhbGlhc2VzOiBbJ2tpY2snLCBcImtcIl0sXHJcbiAgICAgICAgICAgIGNhdGVnb3J5OiAnTW9kZXJhdGlvbicsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50OiBcIktpY2tzIGEgdXNlciBmcm9tIHRoZSBzZXJ2ZXJcIixcclxuICAgICAgICAgICAgICAgIGV4YW1wbGVzOiBbXCI6P2tpY2sgQFVzZXIgPHJlYXNvbj5cIl0sXHJcbiAgICAgICAgICAgICAgICB1c2FnZXM6IFwiPEB1c2VyPiA8cmVhc29uPlwiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNsaWVudFBlcm1pc3Npb25zOiBbJ0tJQ0tfTUVNQkVSUyddLFxyXG4gICAgICAgICAgICB1c2VyUGVybWlzc2lvbnM6IFsnS0lDS19NRU1CRVJTJ10sXHJcbiAgICAgICAgICAgIHJhdGVsaW1pdDogMyxcclxuICAgICAgICAgICAgYXJnczogW3tcclxuICAgICAgICAgICAgICAgIGlkOiAnbWVtYmVyJyxcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdtZW1iZXInLFxyXG4gICAgICAgICAgICAgICAgLy8gbWF0Y2g6ICdjb250ZW50J1xyXG4gICAgICAgICAgICB9XVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBleGVjKG1lc3NhZ2UsIGFyZ3M6IE1lc3NhZ2UpIHtcclxuICAgICAgICBpZiAoIW1lc3NhZ2UubWVtYmVyLnBlcm1pc3Npb25zLmhhcyhcIkJBTl9NRU1CRVJTXCIpKSByZXR1cm4gbWVzc2FnZS51dGlsLnNlbmQoXCJZb3UgZG8gbm90IGhhdmUgcGVybWlzc2lvbiB0byBwZXJmb3JtIHRoaXMgY29tbWFuZCFcIilcclxuXHJcbiAgICAgICAgbGV0IGJhbk1lbWJlciA9IG1lc3NhZ2UubWVudGlvbnMubWVtYmVycy5maXJzdCgpIHx8IG1lc3NhZ2UuZ3VpbGQubWVtYmVycy5mZXRjaChhcmdzWzBdKVxyXG4gICAgICAgIGlmICghYmFuTWVtYmVyKSByZXR1cm4gbWVzc2FnZS51dGlsLnNlbmQoXCJQbGVhc2UgcHJvdmlkZSBhIHVzZXIgdG8gYmFuIVwiKVxyXG5cclxuICAgICAgICBpZiAoIW1lc3NhZ2UuZ3VpbGQubWUucGVybWlzc2lvbnMuaGFzKFtcIkJBTl9NRU1CRVJTXCIsIFwiQURNSU5JU1RSQVRPUlwiXSkpIHJldHVybiBtZXNzYWdlLnV0aWwuc2VuZChcIkkgZG9udCBoYXZlIHBlcm1pc3Npb24gdG8gcGVyZm9ybSB0aGlzIGNvbW1hbmRcIilcclxuXHJcbiAgICAgICAgYmFuTWVtYmVyLnNlbmQoYEhlbGxvLCB5b3UgaGF2ZSBiZWVuIGJhbm5lZCBmcm9tICR7bWVzc2FnZS5ndWlsZC5uYW1lfWApLnRoZW4oKCkgPT5cclxuICAgICAgICAgICAgYmFuTWVtYmVyLmtpY2soYmFuTWVtYmVyKSkuY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKGVycikpXHJcblxyXG4gICAgICAgIG1lc3NhZ2UudXRpbC5zZW5kKGAqKiR7YmFuTWVtYmVyLnVzZXIudGFnfSoqIGhhcyBiZWVuIGJhbm5lZGApLnRoZW4obSA9PiBtLmRlbGV0ZSg1MDAwKSlcclxuXHJcbiAgICAgICAgbGV0IGVtYmVkID0gbmV3IE1lc3NhZ2VFbWJlZCgpXHJcbiAgICAgICAgICAgIC5zZXRDb2xvcihcIlJFRFwiKVxyXG4gICAgICAgICAgICAvLyAuc2V0VGl0bGUoYFsgQ2FzZSAke2Nhc2luZ30gXWApXHJcbiAgICAgICAgICAgIC5zZXRBdXRob3IoYCR7bWVzc2FnZS5ndWlsZC5uYW1lfSBNb2Rsb2dzYCwgbWVzc2FnZS5ndWlsZC5pY29uVVJMKVxyXG4gICAgICAgICAgICAuYWRkRmllbGQoXCJNb2RlcmF0aW9uOlwiLCBcIkJhblwiLCB0cnVlKVxyXG4gICAgICAgICAgICAuYWRkRmllbGQoXCJNdXRlZTpcIiwgYmFuTWVtYmVyLnVzZXIudXNlcm5hbWUsIHRydWUpXHJcbiAgICAgICAgICAgIC5hZGRGaWVsZChcIk1vZGVyYXRvcjpcIiwgbWVzc2FnZS5hdXRob3IudXNlcm5hbWUsIHRydWUpXHJcbiAgICAgICAgICAgIC8vIC5hZGRGaWVsZChcIlJlYXNvbjpcIiwgcmVhc29uKVxyXG4gICAgICAgICAgICAuYWRkRmllbGQoXCJEYXRlOlwiLCBtZXNzYWdlLmNyZWF0ZWRBdC50b0xvY2FsZVN0cmluZygpLCB0cnVlKVxyXG4gICAgICAgIG1lc3NhZ2UudXRpbC5zZW5kKGVtYmVkKVxyXG4gICAgfVxyXG59Il19